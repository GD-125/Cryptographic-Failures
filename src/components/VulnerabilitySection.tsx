import React, { useState } from 'react';
import { KeyRound, FileLock2, ServerCrash, ShieldOff, Info } from 'lucide-react';

interface Vulnerability {
  id: number;
  title: string;
  description: string;
  impact: string;
  example: string;
  solution: string;
  icon: React.ReactNode;
}

const VulnerabilitySection: React.FC = () => {
  const [activeVulnerability, setActiveVulnerability] = useState<number>(1);

  const vulnerabilities: Vulnerability[] = [
    {
      id: 1,
      title: "Using Weak Cryptographic Algorithms",
      description: "Relying on outdated or deprecated cryptographic algorithms such as MD5, SHA-1, or DES that have known vulnerabilities.",
      impact: "Attackers can potentially crack or bypass these algorithms, exposing sensitive data.",
      example: `// Weak hash algorithm example (MD5)
const crypto = require('crypto');
const weakHash = crypto.createHash('md5').update('password123').digest('hex');

// Stronger alternative (SHA-256)
const strongHash = crypto.createHash('sha256').update('password123').digest('hex');`,
      solution: "Use modern, strong cryptographic algorithms like AES-256 for encryption, SHA-256 or better for hashing, and RSA-2048 or ECC for asymmetric encryption.",
      icon: <KeyRound className="h-6 w-6 text-red-500" />
    },
    {
      id: 2,
      title: "Hard-coded Cryptographic Keys",
      description: "Embedding cryptographic keys, passwords, or secrets directly in your source code or configuration files.",
      impact: "Anyone with access to the source code can extract the keys and decrypt sensitive data or forge signatures.",
      example: `// Hard-coded encryption key (BAD PRACTICE)
const encryptionKey = "5f4dcc3b5aa765d61d8327deb882cf99";
const encryptData = (data) => {
  // Using the hard-coded key to encrypt data
};

// Better approach using environment variables
const encryptionKey = process.env.ENCRYPTION_KEY;
const encryptData = (data) => {
  // Using environment variable key to encrypt data
};`,
      solution: "Store keys in secure key management systems, environment variables, or secure vaults. Rotate keys regularly and implement proper access controls.",
      icon: <FileLock2 className="h-6 w-6 text-red-500" />
    },
    {
      id: 3,
      title: "Improper Certificate Validation",
      description: "Failing to properly validate SSL/TLS certificates in client-server communications.",
      impact: "Enables man-in-the-middle attacks where attackers can intercept and modify the data in transit.",
      example: `// Disabling certificate validation (DANGEROUS)
process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

// Instead, properly configure TLS and validate certificates
const https = require('https');
const options = {
  hostname: 'example.com',
  port: 443,
  path: '/',
  method: 'GET',
  ca: [fs.readFileSync('./trusted-certs.pem')]
};`,
      solution: "Always validate certificates against trusted certificate authorities. Pin certificates for critical communications. Keep certificate validation enabled in all environments.",
      icon: <ServerCrash className="h-6 w-6 text-red-500" />
    },
    {
      id: 4,
      title: "Insufficient Randomness",
      description: "Using predictable random number generators for cryptographic operations like key generation, nonces, or salts.",
      impact: "Predictable random values can lead to cryptographic attacks that compromise the entire security system.",
      example: `// Using Math.random() for security purposes (INSECURE)
const randomValue = Math.floor(Math.random() * 1000000).toString();

// Better alternative using a cryptographically secure random function
const crypto = require('crypto');
const secureRandomValue = crypto.randomBytes(16).toString('hex');`,
      solution: "Use cryptographically secure random number generators provided by your platform or language's cryptographic libraries.",
      icon: <ShieldOff className="h-6 w-6 text-red-500" />
    }
  ];

  return (
    <section id="vulnerabilities" className="py-16">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white">
            Common Cryptographic Vulnerabilities
          </h2>
          <div className="mt-2 h-1 w-20 bg-blue-600 dark:bg-blue-400 mx-auto rounded"></div>
        </div>

        <div className="mt-12 grid md:grid-cols-4 gap-4">
          {/* Tabs */}
          <div className="md:col-span-1 flex flex-col space-y-2">
            {vulnerabilities.map(vuln => (
              <button
                key={vuln.id}
                onClick={() => setActiveVulnerability(vuln.id)}
                className={`px-4 py-3 text-left rounded-lg transition-colors duration-200 flex items-center ${
                  activeVulnerability === vuln.id 
                    ? 'bg-blue-600 text-white shadow-md' 
                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                }`}
              >
                <span className="mr-2">{vuln.icon}</span>
                <span className="font-medium">{vuln.title}</span>
              </button>
            ))}
          </div>

          {/* Content */}
          <div className="md:col-span-3 bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm">
            {vulnerabilities.map(vuln => (
              <div key={vuln.id} className={activeVulnerability === vuln.id ? 'block' : 'hidden'}>
                <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">{vuln.title}</h3>
                
                <div className="space-y-6">
                  <div>
                    <h4 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-2">Description</h4>
                    <p className="text-gray-700 dark:text-gray-300">{vuln.description}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-2">Impact</h4>
                    <p className="text-gray-700 dark:text-gray-300">{vuln.impact}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-2">Example</h4>
                    <pre className="bg-gray-100 dark:bg-gray-900 p-4 rounded-lg overflow-x-auto">
                      <code className="text-sm text-gray-800 dark:text-gray-200">{vuln.example}</code>
                    </pre>
                  </div>
                  
                  <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg border-l-4 border-green-500">
                    <h4 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-2 flex items-center">
                      <Info className="h-5 w-5 mr-2 text-green-500" />
                      Solution
                    </h4>
                    <p className="text-gray-700 dark:text-gray-300">{vuln.solution}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="mt-12 bg-yellow-50 dark:bg-yellow-900/20 p-6 rounded-lg border-l-4 border-yellow-500">
          <h4 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">The Impact of Cryptographic Failures</h4>
          <p className="text-gray-700 dark:text-gray-300">
            Cryptographic failures have led to some of the most significant data breaches in history. From the Equifax breach 
            affecting over 147 million people to the Heartbleed vulnerability impacting countless servers worldwide, 
            the consequences can be devastating. These incidents can result in financial losses, legal penalties, 
            reputation damage, and most importantly, the exposure of sensitive user data.
          </p>
        </div>
      </div>
    </section>
  );
};

export default VulnerabilitySection;